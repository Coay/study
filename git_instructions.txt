mkdir filename
cd filename
git init                             //新建一个空仓库
pwd                                  //显示当前目录
git add <file>                       //可反复多次使用，添加多个文件至仓库
git commit -m <message>              //完成添加文件
git status                           //掌握工作区的状态
git diff                             //查看
git reset --hard commit_id           //在版本的历史之间穿梭
git log                              //可以查看提交历史，以便确定要回退到哪个版本
git reflog                           //查看命令历史，以便确定要回到未来的哪个版本
git add命令实际上就是把要提交的所有修改放到暂存区（Stage）
然后，执行git commit就可以一次性把暂存区的所有修改提交到分支
Git跟踪并管理的是修改，而非文件
每次修改，如果不用git add到暂存区，那就不会加入到commit中
git checkout -- file                 //改乱了工作区某个文件的内容，想直接丢弃工作区的修改时
git reset HEAD <file>                //改乱了工作区某个文件的内容，还添加到了暂存区时，修改回到工作区
git rm                               //用于删除一个文件
git remote add origin git@server-name:path/repo-name.git        //关联一个远程库
git push -u origin master                                       //第一次推送master分支的所有内容
git push origin master                                          //推送最新修改
git clone git@server-name:path/repo-name.git                    //克隆仓库
git branch                                                      //查看分支
git branch <name>                                               //创建分支
git checkout <name>                                             //切换分支 
git checkout -b <name>                                          //创建+切换分支
git merge <name>                                                //合并某分支到当前分支
git branch -d <name>                                            //删除分支
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
git log --graph                                                 //可以看到分支合并图，英文状态下按q，退出log
                                                                //合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，
                                                                //能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
                                                                //修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
git stash                                                       //当手头工作没有完成时，先把工作现场git stash一下，
git stash pop                                                   //然后去修复bug，修复后，再git stash pop，回到工作现场。
git stash apply                                                 //恢复工作现场，不删除stash内容
git stash drop                                                  //删除stash内容
                                     //开发一个新feature，最好新建一个分支
git branch -D <name>                 //	要丢弃一个没有被合并过的分支，可以强行删除	
	                                 //master分支是主分支，因此要时刻与远程同步；
                                     //dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
                                     //bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
                                     //feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发		
                                     //多人协作的工作模式
                                     //首先，可以试图用git push origin <branch-name>推送自己的修改；
                                     //如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
                                     //没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
                                     //如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。	
git remote -v                        //查看远程库信息
                                     //本地新建的分支如果不推送到远程，对其他人就是不可见的
	                                 //rebase操作可以把本地未push的分叉提交历史整理成直线；
git tag <tagname>                    //用于新建一个标签，默认为HEAD，也可以指定一个commit id
git tag -a <tagname> -m "blablabla.."//指定标签信息
git tag                              //查看所有标签
git push origin <tagname>            //推送一个本地标签
git push origin --tags               //推送全部未推送过的本地标签
git tag -d <tagname>                 //删除一个本地标签
git push origin :refs/tags/<tagname> //删除一个远程标签                                    									 //rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。	
                                     //忽略文件的原则是：
                                     //忽略操作系统自动生成的文件，比如缩略图等；
                                     //忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
                                     //忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
                                     //忽略某些文件时，需要编写.gitignore；
                                     //.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理
git add -f App.class                 //强制添加文件
$ git config --global alias.m <name> //配置别名
                                     //--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。									 